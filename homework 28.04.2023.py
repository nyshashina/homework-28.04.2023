# Даны два неупорядоченных набора целых чисел (может быть, с повторениями).
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов
# второго множества. Затем пользователь вводит сами элементы множеств.

# n = int(input('Введите количество чисел первого набора: '))
# N = []
# for i in range(n):
#  N.append(int(input('Введите число из первого набора: ')))
#
# m = int(input('Введите количество чисел второго набора: '))
# M = []
# for i in range(m):
#  M.append(int(input('Введите число из второго набора: ')))
#
# a = N + M
# a.sort()
# b = set(a)
# print(len(b))







# В фермерском хозяйстве в Карелии выращивают чернику. Она растёт на круглой грядке, причём кусты
# высажены только по окружности. Таким образом, у каждого куста есть ровно два соседних. Всего на
# грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число
# ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит
# из управляющего модуля и нескольких собирающих модулей. Собирающий модуль за один заход, находясь
# непосредственно перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход
# собирающий модуль, находясь перед некоторым кустом заданной во входном файле грядки.

# n = int(input('Введите количество кустов на клумбе: '))
# N = []
# for i in range(n):
#  N.append(int(input(f'Введите количество ягод на {i + 1}-м кусте: ')))
#
# x = int(input('Введите номер куста, перед которым находится собирающий модуль: '))
#
# count = 0
#
# # Количество кустов, которые мы пройдем до последнего номера куста, равно n - x + 2
# if (n - x + 2) % 3 == 0:
#  # Индекс куста, перед которым стоит модуль, x - 1, индекс куста, с которого начнется сбор, x - 2
#  for i in range(x - 2, n, 3):
#   if count < N[i] + N[i + 1] + N[i + 2]:
#    count = N[i] + N[i + 1] + N[i + 2]
#   # после сбора на кусте не остается ягод
#   N[i] = 0
#   N[i + 1] = 0
#   N[i + 2] = 0
#  for i in range(0, x - 2, 3):
#   if count < N[i] + N[i + 1] + N[i + 2]:
#    count = N[i] + N[i + 1] + N[i + 2]
#   N[i] = 0
#   N[i + 1] = 0
#   N[i + 2] = 0
#
# elif (n - x + 2) % 3 == 2:
#  for i in range(x - 2, n - 2, 3):
#   if count < N[i] + N[i + 1] + N[i + 2]:
#    count = N[i] + N[i + 1] + N[i + 2]
#   N[i] = 0
#   N[i + 1] = 0
#   N[i + 2] = 0
#  if count < N[-2] + N[-1] + N[0]:
#   count = N[-2] + N[-1] + N[0]
#  N[-2] = 0
#  N[-1] = 0
#  N[0] = 0
#  for i in range(0, x - 2, 3):
#   if count < N[i] + N[i + 1] + N[i + 2]:
#    count = N[i] + N[i + 1] + N[i + 2]
#   N[i] = 0
#   N[i + 1] = 0
#   N[i + 2] = 0
#
# elif (n - x + 2) % 3 == 1:
#  for i in range(x - 2, n - 1, 3):
#   if count < N[i] + N[i + 1] + N[i + 2]:
#    count = N[i] + N[i + 1] + N[i + 2]
#   N[i] = 0
#   N[i + 1] = 0
#   N[i + 2] = 0
#  if count < N[-1] + N[0] + N[1]:
#   count = N[-1] + N[0] + N[1]
#  N[-1] = 0
#  N[-0] = 0
#  N[1] = 0
#  for i in range(2, x - 2, 3):
#   if count < N[i] + N[i + 1] + N[i + 2]:
#    count = N[i] + N[i + 1] + N[i + 2]
#   N[i] = 0
#   N[i + 1] = 0
#   N[i + 2] = 0
#
# print(count)